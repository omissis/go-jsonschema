// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"

type ReadOnlyAndRequired struct {
	// MyReadOnlyRequiredString corresponds to the JSON schema field
	// "myReadOnlyRequiredString".
	MyReadOnlyRequiredString string `json:"myReadOnlyRequiredString" yaml:"myReadOnlyRequiredString" mapstructure:"myReadOnlyRequiredString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReadOnlyAndRequired) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["myReadOnlyRequiredString"]; raw != nil && !ok {
		return fmt.Errorf("field myReadOnlyRequiredString in ReadOnlyAndRequired: required")
	}
	if _, ok := raw["myReadOnlyRequiredString"]; raw != nil && ok {
		return fmt.Errorf("field myReadOnlyRequiredString in ReadOnlyAndRequired: read only")
	}
	type Plain ReadOnlyAndRequired
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ReadOnlyAndRequired(plain)
	return nil
}
