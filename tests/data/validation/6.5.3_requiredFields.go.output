// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "encoding/json"

type A653RequiredFieldsMyObject struct {
	// MyNestedObjectString corresponds to the JSON schema field
	// "myNestedObjectString".
	MyNestedObjectString string `json:"myNestedObjectString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A653RequiredFieldsMyObject) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["myNestedObjectString"]; !ok || v == nil {
		return fmt.Errorf("field myNestedObjectString: required")
	}
	type Plain A653RequiredFieldsMyObject
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A653RequiredFieldsMyObject(plain)
	return nil
}

type A653RequiredFieldsMyObjectArrayElem struct {
	// MyNestedObjectString corresponds to the JSON schema field
	// "myNestedObjectString".
	MyNestedObjectString string `json:"myNestedObjectString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A653RequiredFieldsMyObjectArrayElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["myNestedObjectString"]; !ok || v == nil {
		return fmt.Errorf("field myNestedObjectString: required")
	}
	type Plain A653RequiredFieldsMyObjectArrayElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A653RequiredFieldsMyObjectArrayElem(plain)
	return nil
}

type A653RequiredFields struct {
	// MyBoolean corresponds to the JSON schema field "myBoolean".
	MyBoolean bool `json:"myBoolean"`

	// MyBooleanArray corresponds to the JSON schema field "myBooleanArray".
	MyBooleanArray []bool `json:"myBooleanArray"`

	// MyInteger corresponds to the JSON schema field "myInteger".
	MyInteger *int `json:"myInteger,omitempty"`

	// MyIntegerArray corresponds to the JSON schema field "myIntegerArray".
	MyIntegerArray []int `json:"myIntegerArray,omitempty"`

	// MyNull corresponds to the JSON schema field "myNull".
	MyNull interface{} `json:"myNull"`

	// MyNullArray corresponds to the JSON schema field "myNullArray".
	MyNullArray []interface{} `json:"myNullArray"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber float64 `json:"myNumber"`

	// MyNumberArray corresponds to the JSON schema field "myNumberArray".
	MyNumberArray []float64 `json:"myNumberArray"`

	// MyObject corresponds to the JSON schema field "myObject".
	MyObject A653RequiredFieldsMyObject `json:"myObject"`

	// MyObjectArray corresponds to the JSON schema field "myObjectArray".
	MyObjectArray []A653RequiredFieldsMyObjectArrayElem `json:"myObjectArray"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString"`

	// MyStringArray corresponds to the JSON schema field "myStringArray".
	MyStringArray []string `json:"myStringArray"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A653RequiredFields) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["myBoolean"]; !ok || v == nil {
		return fmt.Errorf("field myBoolean: required")
	}
	if v, ok := raw["myBooleanArray"]; !ok || v == nil {
		return fmt.Errorf("field myBooleanArray: required")
	}
	if v, ok := raw["myNull"]; !ok || v == nil {
		return fmt.Errorf("field myNull: required")
	}
	if v, ok := raw["myNullArray"]; !ok || v == nil {
		return fmt.Errorf("field myNullArray: required")
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		return fmt.Errorf("field myNumber: required")
	}
	if v, ok := raw["myNumberArray"]; !ok || v == nil {
		return fmt.Errorf("field myNumberArray: required")
	}
	if v, ok := raw["myObject"]; !ok || v == nil {
		return fmt.Errorf("field myObject: required")
	}
	if v, ok := raw["myObjectArray"]; !ok || v == nil {
		return fmt.Errorf("field myObjectArray: required")
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		return fmt.Errorf("field myString: required")
	}
	if v, ok := raw["myStringArray"]; !ok || v == nil {
		return fmt.Errorf("field myStringArray: required")
	}
	type Plain A653RequiredFields
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.MyNull != nil {
		return fmt.Errorf("field %s: must be null", "myNull")
	}
	for i0 := range plain.MyNullArray {
		if plain.MyNullArray[i0] != nil {
			return fmt.Errorf("field %s: must be null", fmt.Sprintf("myNullArray[%d]", i0))
		}
	}
	*j = A653RequiredFields(plain)
	return nil
}
