// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "regexp"
import "encoding/json"

type Strings struct {
	// CountryCode corresponds to the JSON schema field "country_code".
	CountryCode string `json:"country_code" yaml:"country_code"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Strings) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["country_code"]; !ok || v == nil {
		return fmt.Errorf("field country_code in Strings: required")
	}
	type Plain Strings
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	reg, err := regexp.Compile("^[A-Z]{2}$")
	if err != nil {
		return fmt.Errorf("CountryCode field has invalid pattern '^[A-Z]{2}$'")
	}
	if match := reg.MatchString(plain.CountryCode); !match {
		return fmt.Errorf("CountryCode field does not match pattern '^[A-Z]{2}$'")
	}
	*j = Strings(plain)
	return nil
}
