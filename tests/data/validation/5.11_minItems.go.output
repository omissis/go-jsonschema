// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "encoding/json"

type A511MinItems struct {
	// MyNestedArray corresponds to the JSON schema field "myNestedArray".
	MyNestedArray [][]interface{} `json:"myNestedArray,omitempty" yaml:"myNestedArray,omitempty" mapstructure:"myNestedArray,omitempty"`

	// MyStringArray corresponds to the JSON schema field "myStringArray".
	MyStringArray []string `json:"myStringArray,omitempty" yaml:"myStringArray,omitempty" mapstructure:"myStringArray,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A511MinItems) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain A511MinItems
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.MyNestedArray) < 5 {
		return fmt.Errorf("field %s length: must be >= %d", "myNestedArray", 5)
	}
	for i1 := range plain.MyNestedArray {
		if len(plain.MyNestedArray[i1]) < 5 {
			return fmt.Errorf("field %s length: must be >= %d", fmt.Sprintf("myNestedArray[%d]", i1), 5)
		}
	}
	if len(plain.MyStringArray) < 5 {
		return fmt.Errorf("field %s length: must be >= %d", "myStringArray", 5)
	}
	*j = A511MinItems(plain)
	return nil
}
