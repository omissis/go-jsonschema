// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"

type MinStr string

// UnmarshalJSON implements json.Unmarshaler.
func (j *MinStr) UnmarshalJSON(b []byte) error {
	type Plain MinStr
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain) < 5 {
		return fmt.Errorf("field %s length: must be >= %d", "", 5)
	}
	*j = MinStr(plain)
	return nil
}

type PrimitiveDefs struct {
	// MyNullableString corresponds to the JSON schema field "myNullableString".
	MyNullableString *MinStr `json:"myNullableString,omitempty" yaml:"myNullableString,omitempty" mapstructure:"myNullableString,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString MinStr `json:"myString" yaml:"myString" mapstructure:"myString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PrimitiveDefs) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["myString"]; raw != nil && !ok {
		return fmt.Errorf("field myString in PrimitiveDefs: required")
	}
	type Plain PrimitiveDefs
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PrimitiveDefs(plain)
	return nil
}
