// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"
import "reflect"

type A612Enum struct {
	// MyBooleanTypedEnum corresponds to the JSON schema field "myBooleanTypedEnum".
	MyBooleanTypedEnum *A612EnumMyBooleanTypedEnum `json:"myBooleanTypedEnum,omitempty" yaml:"myBooleanTypedEnum,omitempty" mapstructure:"myBooleanTypedEnum,omitempty"`

	// MyBooleanUntypedEnum corresponds to the JSON schema field
	// "myBooleanUntypedEnum".
	MyBooleanUntypedEnum *A612EnumMyBooleanUntypedEnum `json:"myBooleanUntypedEnum,omitempty" yaml:"myBooleanUntypedEnum,omitempty" mapstructure:"myBooleanUntypedEnum,omitempty"`

	// MyIntegerTypedEnum corresponds to the JSON schema field "myIntegerTypedEnum".
	MyIntegerTypedEnum *A612EnumMyIntegerTypedEnum `json:"myIntegerTypedEnum,omitempty" yaml:"myIntegerTypedEnum,omitempty" mapstructure:"myIntegerTypedEnum,omitempty"`

	// MyMixedTypeEnum corresponds to the JSON schema field "myMixedTypeEnum".
	MyMixedTypeEnum *A612EnumMyMixedTypeEnum `json:"myMixedTypeEnum,omitempty" yaml:"myMixedTypeEnum,omitempty" mapstructure:"myMixedTypeEnum,omitempty"`

	// MyMixedUntypedEnum corresponds to the JSON schema field "myMixedUntypedEnum".
	MyMixedUntypedEnum *A612EnumMyMixedUntypedEnum `json:"myMixedUntypedEnum,omitempty" yaml:"myMixedUntypedEnum,omitempty" mapstructure:"myMixedUntypedEnum,omitempty"`

	// MyNullTypedEnum corresponds to the JSON schema field "myNullTypedEnum".
	MyNullTypedEnum *A612EnumMyNullTypedEnum `json:"myNullTypedEnum,omitempty" yaml:"myNullTypedEnum,omitempty" mapstructure:"myNullTypedEnum,omitempty"`

	// MyNullUntypedEnum corresponds to the JSON schema field "myNullUntypedEnum".
	MyNullUntypedEnum *A612EnumMyNullUntypedEnum `json:"myNullUntypedEnum,omitempty" yaml:"myNullUntypedEnum,omitempty" mapstructure:"myNullUntypedEnum,omitempty"`

	// MyNumberTypedEnum corresponds to the JSON schema field "myNumberTypedEnum".
	MyNumberTypedEnum *A612EnumMyNumberTypedEnum `json:"myNumberTypedEnum,omitempty" yaml:"myNumberTypedEnum,omitempty" mapstructure:"myNumberTypedEnum,omitempty"`

	// MyNumberUntypedEnum corresponds to the JSON schema field "myNumberUntypedEnum".
	MyNumberUntypedEnum *A612EnumMyNumberUntypedEnum `json:"myNumberUntypedEnum,omitempty" yaml:"myNumberUntypedEnum,omitempty" mapstructure:"myNumberUntypedEnum,omitempty"`

	// MyStringTypedEnum corresponds to the JSON schema field "myStringTypedEnum".
	MyStringTypedEnum *A612EnumMyStringTypedEnum `json:"myStringTypedEnum,omitempty" yaml:"myStringTypedEnum,omitempty" mapstructure:"myStringTypedEnum,omitempty"`

	// MyStringUntypedEnum corresponds to the JSON schema field "myStringUntypedEnum".
	MyStringUntypedEnum *A612EnumMyStringUntypedEnum `json:"myStringUntypedEnum,omitempty" yaml:"myStringUntypedEnum,omitempty" mapstructure:"myStringUntypedEnum,omitempty"`
}

type A612EnumMyBooleanTypedEnum bool

type A612EnumMyBooleanUntypedEnum bool

type A612EnumMyIntegerTypedEnum int

type A612EnumMyMixedTypeEnum struct {
	Value interface{}
}

type A612EnumMyMixedUntypedEnum struct {
	Value interface{}
}

type A612EnumMyNullTypedEnum struct {
	Value interface{}
}

type A612EnumMyNullUntypedEnum struct {
	Value interface{}
}

type A612EnumMyNumberTypedEnum float64

type A612EnumMyNumberUntypedEnum float64

type A612EnumMyStringTypedEnum string

const A612EnumMyStringTypedEnumBlue A612EnumMyStringTypedEnum = "blue"
const A612EnumMyStringTypedEnumGreen A612EnumMyStringTypedEnum = "green"
const A612EnumMyStringTypedEnumRed A612EnumMyStringTypedEnum = "red"

type A612EnumMyStringUntypedEnum string

const A612EnumMyStringUntypedEnumBlue A612EnumMyStringUntypedEnum = "blue"
const A612EnumMyStringUntypedEnumGreen A612EnumMyStringUntypedEnum = "green"
const A612EnumMyStringUntypedEnumRed A612EnumMyStringUntypedEnum = "red"

var enumValues_A612EnumMyBooleanTypedEnum = []interface{}{
	true,
	false,
}
var enumValues_A612EnumMyBooleanUntypedEnum = []interface{}{
	true,
	false,
}
var enumValues_A612EnumMyIntegerTypedEnum = []interface{}{
	1,
	2,
	3,
}
var enumValues_A612EnumMyMixedTypeEnum = []interface{}{
	42.0,
	"smurf",
}
var enumValues_A612EnumMyMixedUntypedEnum = []interface{}{
	"red",
	1.0,
	true,
	nil,
}
var enumValues_A612EnumMyNullTypedEnum = []interface{}{
	nil,
}
var enumValues_A612EnumMyNullUntypedEnum = []interface{}{
	nil,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyNullUntypedEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyNullUntypedEnum {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyNullUntypedEnum, v.Value)
	}
	*j = A612EnumMyNullUntypedEnum(v)
	return nil
}

var enumValues_A612EnumMyNumberTypedEnum = []interface{}{
	1.0,
	2.0,
	3.0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyNumberTypedEnum) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyNumberTypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyNumberTypedEnum, v)
	}
	*j = A612EnumMyNumberTypedEnum(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *A612EnumMyNullUntypedEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_A612EnumMyNumberUntypedEnum = []interface{}{
	1.0,
	2.0,
	3.0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyNumberUntypedEnum) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyNumberUntypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyNumberUntypedEnum, v)
	}
	*j = A612EnumMyNumberUntypedEnum(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyNullTypedEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyNullTypedEnum {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyNullTypedEnum, v.Value)
	}
	*j = A612EnumMyNullTypedEnum(v)
	return nil
}

var enumValues_A612EnumMyStringTypedEnum = []interface{}{
	"red",
	"blue",
	"green",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyStringTypedEnum) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyStringTypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyStringTypedEnum, v)
	}
	*j = A612EnumMyStringTypedEnum(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *A612EnumMyNullTypedEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyMixedUntypedEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyMixedUntypedEnum {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyMixedUntypedEnum, v.Value)
	}
	*j = A612EnumMyMixedUntypedEnum(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *A612EnumMyMixedUntypedEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyMixedTypeEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyMixedTypeEnum {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyMixedTypeEnum, v.Value)
	}
	*j = A612EnumMyMixedTypeEnum(v)
	return nil
}

var enumValues_A612EnumMyStringUntypedEnum = []interface{}{
	"red",
	"blue",
	"green",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyStringUntypedEnum) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyStringUntypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyStringUntypedEnum, v)
	}
	*j = A612EnumMyStringUntypedEnum(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *A612EnumMyMixedTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyIntegerTypedEnum) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyIntegerTypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyIntegerTypedEnum, v)
	}
	*j = A612EnumMyIntegerTypedEnum(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyBooleanUntypedEnum) UnmarshalJSON(b []byte) error {
	var v bool
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyBooleanUntypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyBooleanUntypedEnum, v)
	}
	*j = A612EnumMyBooleanUntypedEnum(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A612EnumMyBooleanTypedEnum) UnmarshalJSON(b []byte) error {
	var v bool
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_A612EnumMyBooleanTypedEnum {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_A612EnumMyBooleanTypedEnum, v)
	}
	*j = A612EnumMyBooleanTypedEnum(v)
	return nil
}
