// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "reflect"
import "encoding/json"

type Thing string

var enumValues_Thing = []interface{}{
	"x",
	"y",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Thing) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Thing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Thing, v)
	}
	*j = Thing(v)
	return nil
}

type RefToEnum struct {
	// MyThing corresponds to the JSON schema field "myThing".
	MyThing *Thing `json:"myThing,omitempty" yaml:"myThing,omitempty" mapstructure:"myThing,omitempty"`
}

const ThingX Thing = "x"
const ThingY Thing = "y"
