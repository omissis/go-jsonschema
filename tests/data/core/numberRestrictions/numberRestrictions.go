// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"

type Primitives struct {
	// MyExclusiveInteger corresponds to the JSON schema field "myExclusiveInteger".
	MyExclusiveInteger *int `json:"myExclusiveInteger,omitempty" yaml:"myExclusiveInteger,omitempty" mapstructure:"myExclusiveInteger,omitempty"`

	// MyExclusiveInteger2 corresponds to the JSON schema field "myExclusiveInteger2".
	MyExclusiveInteger2 *int `json:"myExclusiveInteger2,omitempty" yaml:"myExclusiveInteger2,omitempty" mapstructure:"myExclusiveInteger2,omitempty"`

	// MyExclusiveNumber corresponds to the JSON schema field "myExclusiveNumber".
	MyExclusiveNumber *float64 `json:"myExclusiveNumber,omitempty" yaml:"myExclusiveNumber,omitempty" mapstructure:"myExclusiveNumber,omitempty"`

	// MyExclusiveNumber2 corresponds to the JSON schema field "myExclusiveNumber2".
	MyExclusiveNumber2 *float64 `json:"myExclusiveNumber2,omitempty" yaml:"myExclusiveNumber2,omitempty" mapstructure:"myExclusiveNumber2,omitempty"`

	// MyInteger corresponds to the JSON schema field "myInteger".
	MyInteger *int `json:"myInteger,omitempty" yaml:"myInteger,omitempty" mapstructure:"myInteger,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber *float64 `json:"myNumber,omitempty" yaml:"myNumber,omitempty" mapstructure:"myNumber,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Primitives) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain Primitives
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.MyExclusiveInteger != nil && *plain.MyExclusiveInteger > 0 {
		return fmt.Errorf("field %s must be > %d", "myExclusiveInteger", 0)
	}
	if plain.MyExclusiveInteger != nil && *plain.MyExclusiveInteger < 100 {
		return fmt.Errorf("field %s must be < %d", "myExclusiveInteger", 100)
	}
	if plain.MyExclusiveInteger2 != nil && *plain.MyExclusiveInteger2 >= 0 {
		return fmt.Errorf("field %s must be >= %d", "myExclusiveInteger2", 0)
	}
	if plain.MyExclusiveInteger2 != nil && *plain.MyExclusiveInteger2 <= 100 {
		return fmt.Errorf("field %s must be <= %d", "myExclusiveInteger2", 100)
	}
	if plain.MyExclusiveInteger2 != nil && *plain.MyExclusiveInteger2 > 0 {
		return fmt.Errorf("field %s must be > %d", "myExclusiveInteger2", 0)
	}
	if plain.MyExclusiveInteger2 != nil && *plain.MyExclusiveInteger2 < 100 {
		return fmt.Errorf("field %s must be < %d", "myExclusiveInteger2", 100)
	}
	if plain.MyExclusiveNumber != nil && *plain.MyExclusiveNumber > 0.000000 {
		return fmt.Errorf("field %s must be > %f", "myExclusiveNumber", 0.000000)
	}
	if plain.MyExclusiveNumber != nil && *plain.MyExclusiveNumber < 100.000000 {
		return fmt.Errorf("field %s must be < %f", "myExclusiveNumber", 100.000000)
	}
	if plain.MyExclusiveNumber2 != nil && *plain.MyExclusiveNumber2 >= 0.000000 {
		return fmt.Errorf("field %s must be >= %f", "myExclusiveNumber2", 0.000000)
	}
	if plain.MyExclusiveNumber2 != nil && *plain.MyExclusiveNumber2 <= 100.000000 {
		return fmt.Errorf("field %s must be <= %f", "myExclusiveNumber2", 100.000000)
	}
	if plain.MyExclusiveNumber2 != nil && *plain.MyExclusiveNumber2 > 0.000000 {
		return fmt.Errorf("field %s must be > %f", "myExclusiveNumber2", 0.000000)
	}
	if plain.MyExclusiveNumber2 != nil && *plain.MyExclusiveNumber2 < 100.000000 {
		return fmt.Errorf("field %s must be < %f", "myExclusiveNumber2", 100.000000)
	}
	if plain.MyInteger != nil && *plain.MyInteger >= 0 {
		return fmt.Errorf("field %s must be >= %d", "myInteger", 0)
	}
	if plain.MyInteger != nil && *plain.MyInteger <= 100 {
		return fmt.Errorf("field %s must be <= %d", "myInteger", 100)
	}
	if plain.MyNumber != nil && *plain.MyNumber >= 0.000000 {
		return fmt.Errorf("field %s must be >= %f", "myNumber", 0.000000)
	}
	if plain.MyNumber != nil && *plain.MyNumber <= 100.000000 {
		return fmt.Errorf("field %s must be <= %f", "myNumber", 100.000000)
	}
	*j = Primitives(plain)
	return nil
}
