// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import yaml "gopkg.in/yaml.v3"

type Defaulter struct {
	// MyArray corresponds to the JSON schema field "myArray".
	MyArray []string `json:"myArray,omitempty" yaml:"myArray,omitempty" mapstructure:"myArray,omitempty"`

	// MyArrayNoDefault corresponds to the JSON schema field "myArrayNoDefault".
	MyArrayNoDefault []string `json:"myArrayNoDefault,omitempty" yaml:"myArrayNoDefault,omitempty" mapstructure:"myArrayNoDefault,omitempty"`

	// MyInt corresponds to the JSON schema field "myInt".
	MyInt int `json:"myInt,omitempty" yaml:"myInt,omitempty" mapstructure:"myInt,omitempty"`

	// MyIntNoDefault corresponds to the JSON schema field "myIntNoDefault".
	MyIntNoDefault *int `json:"myIntNoDefault,omitempty" yaml:"myIntNoDefault,omitempty" mapstructure:"myIntNoDefault,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber float64 `json:"myNumber,omitempty" yaml:"myNumber,omitempty" mapstructure:"myNumber,omitempty"`

	// MyNumberNoDefault corresponds to the JSON schema field "myNumberNoDefault".
	MyNumberNoDefault *float64 `json:"myNumberNoDefault,omitempty" yaml:"myNumberNoDefault,omitempty" mapstructure:"myNumberNoDefault,omitempty"`

	// MyObject corresponds to the JSON schema field "myObject".
	MyObject DefaulterMyObject `json:"myObject,omitempty" yaml:"myObject,omitempty" mapstructure:"myObject,omitempty"`

	// MyObjectNoDefault corresponds to the JSON schema field "myObjectNoDefault".
	MyObjectNoDefault *DefaulterMyObjectNoDefault `json:"myObjectNoDefault,omitempty" yaml:"myObjectNoDefault,omitempty" mapstructure:"myObjectNoDefault,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString,omitempty" yaml:"myString,omitempty" mapstructure:"myString,omitempty"`

	// MyStringNoDefault corresponds to the JSON schema field "myStringNoDefault".
	MyStringNoDefault *string `json:"myStringNoDefault,omitempty" yaml:"myStringNoDefault,omitempty" mapstructure:"myStringNoDefault,omitempty"`
}

type DefaulterMyObject struct {
	// MyArray corresponds to the JSON schema field "myArray".
	MyArray []string `json:"myArray,omitempty" yaml:"myArray,omitempty" mapstructure:"myArray,omitempty"`

	// MyArrayNoDefault corresponds to the JSON schema field "myArrayNoDefault".
	MyArrayNoDefault []string `json:"myArrayNoDefault,omitempty" yaml:"myArrayNoDefault,omitempty" mapstructure:"myArrayNoDefault,omitempty"`

	// MyInt corresponds to the JSON schema field "myInt".
	MyInt int `json:"myInt,omitempty" yaml:"myInt,omitempty" mapstructure:"myInt,omitempty"`

	// MyIntNoDefault corresponds to the JSON schema field "myIntNoDefault".
	MyIntNoDefault *int `json:"myIntNoDefault,omitempty" yaml:"myIntNoDefault,omitempty" mapstructure:"myIntNoDefault,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber float64 `json:"myNumber,omitempty" yaml:"myNumber,omitempty" mapstructure:"myNumber,omitempty"`

	// MyNumberNoDefault corresponds to the JSON schema field "myNumberNoDefault".
	MyNumberNoDefault *float64 `json:"myNumberNoDefault,omitempty" yaml:"myNumberNoDefault,omitempty" mapstructure:"myNumberNoDefault,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString,omitempty" yaml:"myString,omitempty" mapstructure:"myString,omitempty"`

	// MyStringNoDefault corresponds to the JSON schema field "myStringNoDefault".
	MyStringNoDefault *string `json:"myStringNoDefault,omitempty" yaml:"myStringNoDefault,omitempty" mapstructure:"myStringNoDefault,omitempty"`
}

type DefaulterMyObjectNoDefault struct {
	// MyArray corresponds to the JSON schema field "myArray".
	MyArray []string `json:"myArray,omitempty" yaml:"myArray,omitempty" mapstructure:"myArray,omitempty"`

	// MyArrayNoDefault corresponds to the JSON schema field "myArrayNoDefault".
	MyArrayNoDefault []string `json:"myArrayNoDefault,omitempty" yaml:"myArrayNoDefault,omitempty" mapstructure:"myArrayNoDefault,omitempty"`

	// MyInt corresponds to the JSON schema field "myInt".
	MyInt int `json:"myInt,omitempty" yaml:"myInt,omitempty" mapstructure:"myInt,omitempty"`

	// MyIntNoDefault corresponds to the JSON schema field "myIntNoDefault".
	MyIntNoDefault *int `json:"myIntNoDefault,omitempty" yaml:"myIntNoDefault,omitempty" mapstructure:"myIntNoDefault,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber float64 `json:"myNumber,omitempty" yaml:"myNumber,omitempty" mapstructure:"myNumber,omitempty"`

	// MyNumberNoDefault corresponds to the JSON schema field "myNumberNoDefault".
	MyNumberNoDefault *float64 `json:"myNumberNoDefault,omitempty" yaml:"myNumberNoDefault,omitempty" mapstructure:"myNumberNoDefault,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString,omitempty" yaml:"myString,omitempty" mapstructure:"myString,omitempty"`

	// MyStringNoDefault corresponds to the JSON schema field "myStringNoDefault".
	MyStringNoDefault *string `json:"myStringNoDefault,omitempty" yaml:"myStringNoDefault,omitempty" mapstructure:"myStringNoDefault,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DefaulterMyObjectNoDefault) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain DefaulterMyObjectNoDefault
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = DefaulterMyObjectNoDefault(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *DefaulterMyObjectNoDefault) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	type Plain DefaulterMyObjectNoDefault
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = DefaulterMyObjectNoDefault(plain)
	return nil
}

// SetDefaults sets the fields of DefaulterMyObjectNoDefault to their defaults.
// Fields which do not have a default value are left untouched.
func (c *DefaulterMyObjectNoDefault) SetDefaults() {
	c.MyInt = 12345.0
	c.MyNumber = 11.1
	c.MyString = "hello"
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DefaulterMyObject) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain DefaulterMyObject
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = DefaulterMyObject(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *DefaulterMyObject) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	type Plain DefaulterMyObject
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = DefaulterMyObject(plain)
	return nil
}

// SetDefaults sets the fields of DefaulterMyObject to their defaults.
// Fields which do not have a default value are left untouched.
func (c *DefaulterMyObject) SetDefaults() {
	c.MyInt = 12345.0
	c.MyNumber = 11.1
	c.MyString = "hello"
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Defaulter) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Defaulter
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myObject"]; !ok || v == nil {
		plain.MyObject = DefaulterMyObject{
			MyArray: []string{
				"one",
				"two",
			},
			MyInt:    12345.0,
			MyNumber: 11.1,
			MyString: "hello",
		}
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = Defaulter(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Defaulter) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	type Plain Defaulter
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	if v, ok := raw["myInt"]; !ok || v == nil {
		plain.MyInt = 12345.0
	}
	if v, ok := raw["myNumber"]; !ok || v == nil {
		plain.MyNumber = 11.1
	}
	if v, ok := raw["myObject"]; !ok || v == nil {
		plain.MyObject = DefaulterMyObject{
			MyArray: []string{
				"one",
				"two",
			},
			MyInt:    12345.0,
			MyNumber: 11.1,
			MyString: "hello",
		}
	}
	if v, ok := raw["myString"]; !ok || v == nil {
		plain.MyString = "hello"
	}
	*j = Defaulter(plain)
	return nil
}

// SetDefaults sets the fields of Defaulter to their defaults.
// Fields which do not have a default value are left untouched.
func (c *Defaulter) SetDefaults() {
	c.MyInt = 12345.0
	c.MyNumber = 11.1
	c.MyObject = DefaulterMyObject{
		MyArray: []string{
			"one",
			"two",
		},
		MyInt:    12345.0,
		MyNumber: 11.1,
		MyString: "hello",
	}
	c.MyString = "hello"
}
